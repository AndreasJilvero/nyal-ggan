if(typeof window.sf3pid === 'undefined'){
  if(window.sfpid){
    window.sf3pid = window.sfpid;
  }
}

var sfV3 = {
  init(){
    let blocked = sfV3.sfGetPixelCookie('sf-blocked');
    if (blocked === '1') {
      return;
    }
    // Start by loading our pixel data.
    sfV3.getSession();
    sfV3.loadPid();
  },
  isChatOnline: async function(schedule, currentTeam) {
    if(schedule) {

      // First check for overrides.
      function isDateInRange(override, timezone) {
        const currentDate = new Date();
        const options = { timeZone: timezone };
        const overrideDate = new Date(new Date(`${override.date}T${override.from}:00`).toLocaleString('en-US', options));

        // Check if the current date matches the override date
        if (
          currentDate.getFullYear() === overrideDate.getFullYear() &&
          currentDate.getMonth() === overrideDate.getMonth() &&
          currentDate.getDate() === overrideDate.getDate()
        ) {
          if(override.offline === true){
            return 'offline_always';
          } else {
            const currentTime = currentDate.getHours() * 60 + currentDate.getMinutes();
            const fromTime = parseInt(override.from.split(":")[0]) * 60 + parseInt(override.from.split(":")[1]);
            const toTime = parseInt(override.to.split(":")[0]) * 60 + parseInt(override.to.split(":")[1]);

            // Check if the current time is within the specified range
            if (currentTime >= fromTime && currentTime <= toTime) {
              return 'online';
            } else {
              return 'offline_always';
            }
          }
        }

        return false;
      }

      // If there is an override, make sure to block.
      const timezone = schedule.timezone;
      let overrides = schedule.overrides;
      if(typeof overrides !== 'undefined') {
        for (const override of overrides) {
          if (override.enabled) {
            if (override.teams.some(team => team.value === currentTeam) || !override.teams || override.teams.length === 0 || (override.teams && override.teams[0].value === 'all')) {
              let status = isDateInRange(override, timezone);
              if (status === 'offline_always') {
                return false;
              } else if (status === 'online'){
                return true;
              }
            }
          }
        }
      }

      // Create a new Date object with the current time in the desired timezone
      const currentTime = new Date();
      const currentTimeInHelsinki = new Date(currentTime.toLocaleString("en-US", {timeZone: schedule.timezone}));

      // Extract the day and time components
      const currentDay = currentTimeInHelsinki.toLocaleString('en-US', {weekday: 'long'}).toLowerCase();
      const currentHour = currentTimeInHelsinki.getHours() * 60 + currentTimeInHelsinki.getMinutes();

      if (schedule[currentDay]) {
        for (const hour of schedule[currentDay].hours) {
          if ((hour.teams && hour.teams.some(team => team.value === currentTeam)) || !hour.teams || hour.teams.length === 0 || (hour.teams && hour.teams[0].value === 'all')) {
            if(hour.enabled) {
              const fromTimeParts = hour.from.split(':');
              const toTimeParts = hour.to.split(':');
              const fromMinutes = parseInt(fromTimeParts[0]) * 60 + parseInt(fromTimeParts[1]);
              const toMinutes = parseInt(toTimeParts[0]) * 60 + parseInt(toTimeParts[1]);

              if (currentHour >= fromMinutes && currentHour <= toMinutes) {

                if(typeof schedule.type !== 'undefined' && schedule.type === "businessHoursUsers"){
                  var url = 'https://dash.serviceform.com/api/team-user-state?pid=' + sf3pid + '&teamId=' + sfDynamicTeam;

                  var response = await fetch(url);

                  if (!response.ok) {
                    throw new Error('Error: ' + response.status);
                  }

                  var responseData = await response.json();

                  if(responseData.count === 0){
                    return false;
                  } else {
                    return true;
                  }
                }

                return true; // Chat is online for the current day and time
              }
            }
          }
        }
      }

      return false; // Chat is offline for the current day and time
    }
  },
  getUrl() {
    let currentOrigin = window.location.origin;

    let url = "https://dash.serviceform.com";

    if (currentOrigin === "https://dev.serviceform.com") {
      url = "https://dev.serviceform.com";
    } else if (currentOrigin.includes("localhost")) {
      url = currentOrigin;
    } else if (currentOrigin === "https://dash.serviceform.com") {
      url = currentOrigin;
    }
    return url
  },
  onePageMode: function () {
    if (typeof sfV3.onePageListener === 'undefined') {
      sfV3.onePageListener = 1;

      (function() {
        var pushState = history.pushState;
        var replaceState = history.replaceState;

        history.pushState = function() {
          pushState.apply(history, arguments);
          window.dispatchEvent(new Event('pushstate'));
          window.dispatchEvent(new Event('locationchange'));
        };

        history.replaceState = function() {
          replaceState.apply(history, arguments);
          window.dispatchEvent(new Event('replacestate'));
        };

        window.addEventListener('popstate', function() {
          window.dispatchEvent(new Event('locationchange'))
        });
      })();

      setTimeout(function () {
           window.addEventListener('locationchange', function(){
             window.sfBotLoaded = 0;
             window.sfInlineLoaded = 0;

             if(window.sfSdkKit){
               window.sfSdkKit.closeChat();
             }

             sfV3.rulesExecuted = 0;
             setTimeout(function () {
               if(typeof sfV3.ruleData.performanceMode !== 'undefined' && sfV3.ruleData.performanceMode === true) {
                 window.addEventListener('scroll', startSfInit);

                 function startSfInit() {
                   window.removeEventListener("scroll", startSfInit);
                   sfV3.runMapping()
                   sfV3.processRules();
                 }
               } else {
                 sfV3.runMapping();
                 sfV3.processRules();
               }
             },1000)
           });
      }, 1000);
    }
  },
  reloadPixelSession(){
    if(window.sfSdkKit){
      window.sfSdkKit.closeChat();
    }
  },
  getSession(){
    // Check if cookie exists. If exists use session ID.
    let session = sfV3.sfGetPixelCookie('sf-pxs');
    if (typeof session === 'undefined' || session === '') {
      let stamp = new Date().getTime();
      session = stamp + sfV3.generateId(16);
      sfV3.sid = session;
      sfV3.fsid = 'form-' + session;
      // Expires in 30 mins
      sfV3.sfSetPixelCookie('sf-pxs', session, 0.0208333)
    } else {
      // Adds additional 30mins to the session
      sfV3.sfSetPixelCookie('sf-pxs', session, 0.0208333)
      sfV3.sid = session;
      sfV3.fsid = 'form-' + session;
      return session;
    }
  },
  getDevice() {
    const userAgent = navigator.userAgent.toLowerCase()

    if (/mobile|android|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(userAgent)) {
      return "mobile"
    } else if (/tablet|ipad|playbook|silk/i.test(userAgent)) {
      return "tablet"
    } else if (/tv|smarttv|appletv|googletv|hbbtv|pov_tv|netcast|webos|tizen|viera|roku|dlnadoc|palmos|webmate|bada|bolt|kindle|ucbrowser/i.test(userAgent)) {
      return "tv"
    } else if (/windows|macintosh|x11|linux/i.test(userAgent)) {
      return "desktop"
    } else {
      return "other"
    }
  },
  updateStats() {
    var ref = ''
    if (document.referrer === '') {
      ref = 'd'
    }

    const device = this.getDevice()

    // Create statistics.
    var statistics = {
      pid: window.sf3pid,
      sid: window.sfV3.sid,
      site: window.location.host,
      lang: navigator.language,
      os: navigator.userAgent,
      ref: ref,
      page: window.location.href,
      browser: sfV3.browser(),
      pages: [],
      mobile: sfV3.checkMobile(),
      created: new Date().toISOString(),
      device: device,
      source: window.location.href,
      uid: window.sfV3.ruleData.master,
      tools: []
    }

     // Add the current page.
    let currentPage = {
      ref: ref,
      url: document.location.href,
      dur: 0,
      created: new Date().toISOString(),
      description: (document.querySelector('head meta[name="description"]')?.getAttribute('content') || document.querySelector('head meta[property="og:description"]')?.getAttribute('content') || '').slice(0, 140),
      image: document.querySelector('head meta[property="og:image"]')?.getAttribute('content') || '',
      title: document.querySelector('head meta[property="og:title"]')?.getAttribute('content') || document.title,
    }

    // Add the page to the object.
    statistics.pages.push(currentPage)

    sfV3.stats = statistics
    // Send statistics.
    sfV3.sendStats(statistics)
  },
  sendStats(data) {
    data = JSON.stringify(data);
    // Send data to https://statistics.serviceform.com/data
    // Save initial data.
    var Web = "https://statistics.serviceform.com/data"
    var xhrWeb = new XMLHttpRequest()
    xhrWeb.open("POST", Web)
    xhrWeb.setRequestHeader("Content-Type", "application/json")
    xhrWeb.send(data)
  },
  checkMobile() {
    let check = false;
    (function (a) { if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(a.substr(0, 4))) check = true })(navigator.userAgent || navigator.vendor || window.opera);
    return check;
  },
  browser() {
    let b = 'na';
    if (typeof window.navigator !== 'undefined' && typeof window.navigator.userAgent !== 'undefined') {
      let agent = window.navigator.userAgent;
      let browser = agent.match(/(firefox|msie|chrome|safari)[/\s]([\d.]+)/ig);
      if (browser) {
        if (browser[0]) {
          browser = browser[0].split('/');
          if (browser[0]) {
            b = browser[0];
          }
        }
      }
    }

    return b;
  },

  loadScript(url, callback) {
    if (!document.getElementById(url)) {
      var scriptTag = document.createElement('script');
      scriptTag.setAttribute('type', 'text/javascript');
      scriptTag.setAttribute('src', url);
      scriptTag.setAttribute('id', url);
      scriptTag.setAttribute('charset', 'UTF-8');

      scriptTag.async = true;

      if (scriptTag.readyState) {
        scriptTag.onreadystatechange = function () {
          if (this.readyState === 'complete' || this.readyState === 'loaded') {
            callback();
          }
        };
      } else {
        scriptTag.onload = callback;
      }

      (document.getElementsByTagName('head')[0] || document.documentElement).appendChild(scriptTag);
    } else {
      callback();
    }
  },
  sfSetPixelCookie: function (cname, cvalue, exdays) {
    if (typeof window.sfCookieLess === 'undefined' || window.sfCookieLess === 0) {
      var d = new Date();
      d.setTime(d.getTime() + (parseFloat(exdays) * 24 * 60 * 60 * 1000));
      var expires = "expires=" + d.toUTCString();
      document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/;SameSite=Lax;";
    }
  },
  sfGetPixelCookie: function (cname) {
    var name = cname + "=";
    var ca = document.cookie.split(';');
    for (var i = 0; i < ca.length; i++) {
      var c = ca[i];
      while (c.charAt(0) == ' ') {
        c = c.substring(1);
      }
      if (c.indexOf(name) == 0) {
        return c.substring(name.length, c.length);
      }
    }
    return "";
  },
  loadPid(){
    var xhr = new XMLHttpRequest();
    var data = '';
    xhr.addEventListener("readystatechange", async function () {
      if (this.readyState === 4) {
        var response = this.responseText;
        response = JSON.parse(response);

        sfV3.ruleData = response;
        if(typeof sfV3.ruleData.performanceMode !== 'undefined' && sfV3.ruleData.performanceMode === true) {
          window.addEventListener('scroll', startSfInit);

          function startSfInit() {
            window.removeEventListener("scroll", startSfInit);
            sfV3.processRules();
          }
        } else {
          sfV3.processRules();
        }
      }
    });
    const currentUrl = this.getUrl()
    xhr.open("GET", currentUrl + "/api/data?pid=" + window.sf3pid);
    xhr.send(data);
  },
  runMapping(){
    let url = window.location.href;

    if(sfV3.ruleData && sfV3.ruleData.rules) {
      var rules = sfV3.ruleData.rules;

      // Mapping first.
      var mapping = rules.mapping;

      if (mapping) {
        for (let i = 0; i < mapping.length; i++) {
          if (mapping[i] && mapping[i].rule && mapping[i].rule.value === 'class_text') {

            // Defaults for portal mapping.
            var allValues = mapping[i].ruleValue + ', #roomData, .dealerName, #car > div:nth-child(9) > div.mb.ls > span > a:nth-child(1) > b, .text-petroleum.underline, #yhteystiedot a, .contact-detail__address-dealer';

            var ruleClasses = allValues.split(',').map((cls) => cls.trim());
            ruleClasses.forEach((ruleClass) => {
              var elements = document.querySelectorAll(ruleClass);
              elements.forEach((element) => {
                if (element) {
                  let siteText = element.textContent.toLowerCase();
                  if (element.getAttribute('data-title')) {
                    siteText = element.getAttribute('data-title').toLowerCase();
                  }
                  if (typeof mapping[i].containsText === 'undefined' && mapping[i].containsText === '') {
                    let markTeamLabel = mapping[i].markTeam ? mapping[i].markTeam.label.toLowerCase() : '';
                    if (markTeamLabel && siteText.includes(markTeamLabel)) {
                      window.sfDynamicTeam = mapping[i].markTeam.value;
                    }
                  } else {
                    if (mapping[i].containsText) {
                      let actions = mapping[i].actions;

                      let containsText = mapping[i].containsText.toLowerCase();
                      if (containsText && siteText.includes(containsText)) {
                        for (var x = 0; x < actions.length; x++) {
                          if(actions[x].value === 'markTeam'){
                            if (mapping[i].markTeam) {
                              window.sfDynamicTeam = mapping[i].markTeam.value;
                            }
                          } else if(actions[x].value === 'emailCopy'){
                            if (mapping[i].emailCopy) {
                              window.sfDynamicEmail = mapping[i].emailCopy;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              });
            });
          } else if (mapping[i] && mapping[i].rule && mapping[i].rule.value === 'url_contains') {
            if(url) {
              if (url.includes(mapping[i].ruleValue)) {
                if (mapping[i].emailCopy) {
                  window.sfDynamicEmail = mapping[i].emailCopy;
                }
                if (mapping[i].markTeam && mapping[i].markTeam.value) {
                  window.sfDynamicTeam = mapping[i].markTeam.value;
                }
              }
            }
          }
        }
      }
    }
  },
  processRules(){

    let rules = sfV3.ruleData.rules;
    if (typeof sfV3.rulesExecuted === 'undefined' || sfV3.rulesExecuted === 0) {
      if (typeof rules !== 'undefined') {

        let loadedTools = [];
        // Loop advanced rules first.

        let advancedRules = rules.advanced;
        let url = window.location.href;

        if(typeof sfV3.ruleData.onePage !== 'undefined' && sfV3.ruleData.onePage === true) {
          sfV3.onePageMode()
        }
        sfV3.runMapping();

        for (var k = 0; k < advancedRules.length; k++) {
          var splitRules = advancedRules[k].filter_value.split(',');

          if(advancedRules[k].type === 'url_contains') {
            if(advancedRules[k].status === true) {
              for (var ik = 0; ik < splitRules.length; ik++) {
                let ruleInd = splitRules[ik].trim();
                if (url.includes(ruleInd) || advancedRules[k].filter_value === '') {
                  loadedTools.push(this.processAction(advancedRules[k]));
                }
              }
            }
          }
          else if(advancedRules[k].type === 'url_equals') {
            if(advancedRules[k].status === true) {
              for (var ik = 0; ik < splitRules.length; ik++) {
                if (advancedRules[k].filter_value === url) {
                  loadedTools.push(this.processAction(advancedRules[k]));
                }
              }
            }
          } else if(advancedRules[k].type === 'css_selector') {
            if(advancedRules[k].status === true) {
              if(advancedRules[k].filter_value !== '') {
                if(document.querySelector(advancedRules[k].filter_value)) {
                  loadedTools.push(this.processAction(advancedRules[k]));
                }
              }
            }
          }
        }
        // If no advanced rules could load chatbot, check the simple rules.
        let simpleRules = rules.simple;

        for (var i = 0; i < simpleRules.length; i++) {
          if(simpleRules[i].status === true) {
            loadedTools.push(this.processAction(simpleRules[i]));
          }
        }

        loadedTools = loadedTools.filter(item => item !== 0)
        sfV3.rulesExecuted = 1;
        if(typeof rules.stats === 'undefined' || rules.stats) {
          // Stats sending after loading.
          sfV3.updateStats(loadedTools);
        }
      } else {
        // Save views anyways.
        sfV3.updateStats();
      }
    }
  },
  checkForJson: function (text) {
    if (/^[\],:{}\s]*$/.test(text.replace(/\\["\\\/bfnrtu]/g, '@').
    replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
    replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {
      return 1;
    } else {
      return 0;
    }
  },
  processAction: async function(rule) {
    if(rule.action === 'dynamicEmail') {
      window.sfDynamicEmail = rule.action_value2;
    }
    if(rule.action === 'online_offline') {
      if (window.sfBotLoaded !== 1) {

        let team = 'all';
        if(typeof window.sfDynamicTeam !== 'undefined' && window.sfDynamicTeam !== ''){
          team = window.sfDynamicTeam;
        }

        window.sfBotLoaded = 1;

        let online = await sfV3.isChatOnline(sfV3.ruleData.businessHours, team);

        let chatTool = rule.action_value_offline;
        if(online){
          chatTool = rule.action_value;
        }

        this.loadChatTool(chatTool, 'chat', '');
        return {
          tid: chatTool
        }
      }
    }
    if(rule.action === 'chat') {
      if (window.sfBotLoaded !== 1) {
        this.loadChatTool(rule.action_value, 'chat', '');
        window.sfBotLoaded = 1;
        return {
          tid: rule.action_value
        }
      }
    } else if(rule.action === 'engagement_chat' || rule.action === 'engagement'){
      if (window.sfInlineLoaded !== 1) {
        this.loadChatToolInline(rule.action_value, rule.action, rule.action_value2);
        window.sfInlineLoaded = 1;
        return {
          tid: rule.action_value
        }
      }
    } else if(rule.action === 'dynamic_form' || rule.action === 'form' || rule.action === 'popup' || rule.action === 'form_cta'){
      if (window.sfFormLoaded !== 1) {
        this.loadChatToolForm(rule.action_value, rule.action, rule.action_value2);
        window.sfFormLoaded = 1;
        return {
          tid: rule.action_value
        }
      }
    } else if(rule.action === 'customJS'){
      let customJS = rule.action_js_value;
      if (typeof customJS !== 'undefined') {
        if (customJS !== '') {
          if (sfV3.checkForJson(customJS)) {
            eval(JSON.parse(customJS));
          } else {
            eval(customJS);
          }
        }
      }
    } else if (rule.action === "disable_all_tools") {
      window.sfBotLoaded = 1;
      window.sfInlineLoaded = 1;
      window.sfFormLoaded = 1;
    } else if (rule.action === "disable_chat") {
      window.sfBotLoaded = 1;
    } else if (rule.action === "disable_inline_chat") {
      window.sfInlineLoaded = 1;
    } else if (rule.action === "disable_forms") {
      window.sfFormLoaded = 1;
    }

    return 0;
  },
  loadChatTool(tid, type, place){

    // Add element to body.
    var body = document.querySelector('body');

    if(type === 'engagement_chat') {
      var body = document.querySelector(place);
      if(!body){
        console.log('Serviceform: Placement class doesnt exist.')
        return;
      }
    }

    body.insertAdjacentHTML('beforeend', '<div id="sf-chat-tool" class="sf-'+type+'""></div>');

    const currentUrl = this.getUrl()

    var data = "";
    var xhr = new XMLHttpRequest();

    xhr.addEventListener("readystatechange", async function () {
      if (this.readyState === 4) {
        var response = this.responseText;
        response = JSON.parse(response);
        window.serviceChatData = response;
        window.serviceChatData.tid = tid;

        if(window.sfSdkKit){
          sfSdkKit.resetChat();
        } else {

          if (response !== '404') {
            var link = document.createElement("link");
            link.rel = "stylesheet";
            let u = currentUrl;

            if (window.location.href.includes('test.html')) {
              u = 'http://localhost:3000';
            }
            link.href = u + '/embed/chat.css?10';
            document.getElementsByTagName("head")[0].appendChild(link);
            // if (window.location.href.includes('test.html')) {
            //   url = 'http://localhost:3000';
            // }
            sfV3.loadScript(u + '/embed/chat.js?10')
          }
        }
      }
    });

    xhr.open("GET", currentUrl + "/api/data?tid=" + tid);
    xhr.send(data);
  },
  loadChatToolInline(tid, type, place){

    // Add element to body.
    var body = document.querySelector('body');

    if(type === 'engagement_chat' || type === 'engagement') {
      var body = document.querySelector(place);
      if(!body){
        console.log('Serviceform: Placement class doesnt exist.')
        return;
      }
    }

    body.insertAdjacentHTML('beforeend', '<div id="sf-chat-tool-inline" class="sf-'+type+'""></div>');

    const currentUrl = this.getUrl()

    var data = "";
    var xhr = new XMLHttpRequest();

    xhr.addEventListener("readystatechange", async function () {
      if (this.readyState === 4) {
        var response = this.responseText;
        response = JSON.parse(response);
        window.inlineChatData = response;
        window.inlineChatData.tid = tid;

        if (response !== '404') {
          var link = document.createElement("link");
          link.rel = "stylesheet";
          let u = currentUrl;

          if (window.location.href.includes('test.html')) {
            u = 'http://localhost:3000';
          }
          link.href = u + '/embed/chat.css?11';
          document.getElementsByTagName("head")[0].appendChild(link);
          // if (window.location.href.includes('test.html')) {
          //   url = 'http://localhost:3000';
          // }
          sfV3.loadScript(u + '/embed/inline.js?11')
        }
      }
    });

    xhr.open("GET", currentUrl + "/api/data?tid=" + tid);
    xhr.send(data);
  },

  loadChatToolForm(tid, type, place){

    // Add element to body.
    var body = document.querySelector('body');
    var designType = 'form';

    if(type === 'dynamic_form' || type === 'form') {
      body = document.querySelector(place);
      if(!body){
        console.log('Serviceform: Placement class doesnt exist.')
        return;
      }
    } else if(type === 'popup') {
      designType = 'popup';
    } else if(type === 'form_cta') {
      designType = 'sidebar'
    }

    body.insertAdjacentHTML('beforeend', '<div id="sf-chat-tool-form" class="sf-'+type+'""></div>');

    const currentUrl = this.getUrl()

    var data = "";
    var xhr = new XMLHttpRequest();

    xhr.addEventListener("readystatechange", async function () {
      if (this.readyState === 4) {
        var response = this.responseText;
        response = JSON.parse(response);
        window.formChatData = response;
        window.formChatData.design.designType = designType;
        window.formChatData.tid = tid;

        if (response !== '404') {
          var link = document.createElement("link");
          link.rel = "stylesheet";
          let u = currentUrl;

          if (window.location.href.includes('test.html')) {
            u = 'http://localhost:3000';
          }
          link.href = u + '/embed/form.css?11';
          document.getElementsByTagName("head")[0].appendChild(link);
          // if (window.location.href.includes('test.html')) {
          //   url = 'http://localhost:3000';
          // }
          sfV3.loadScript(u + '/embed/form.js?11')
        } else {
          console.log("no response")
        }
      }
    });

    xhr.open("GET", currentUrl + "/api/data?tid=" + tid);
    xhr.send(data);
  },

  generateId: function (length) {
    var s = '';
    do { s += Math.random().toString(36).substr(2); } while (s.length < length);
    s = s.substr(0, length);

    return s;
  }
};

sfV3.init();
